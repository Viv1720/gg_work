---
title: "ggplot_package_scrape"
format: html
editor: visual
---

## Data Scrape for GGPlot Packages

The following code is designed to scrape packages in the ggplot environment from the tidyverse gallery (https://exts.ggplot2.tidyverse.org/gallery/) and the CRAN page (https://cran.r-project.org/web/packages/available_packages_by_name.html) to then retrieve the cumulative historical cran download count for each. It also scrapes the github star count listed for the packages on the tidyverse gallery page.

## Tidyverse Gallery

First import the necessary packages:

```{r}
library(tidyverse)
library(rvest)
library(packageRank)
```

Read in the downloaded tidyverse gallery page html file. Must download webpage for the github star scrape to work properly.

```{r}
df <- read_html("/Users/vivzh/OneDrive/Documents/gg_work/exts.ggplot2.tidyverse.org.html")
```

Scrape the package name and store in a package_names vector.

```{r}
package_names <- df |>
  html_elements("div.card-content") |> 
  html_elements("span.card-title") |> 
  html_text()
```

The below function get_total_downloads takes in a package name and a date parameter to retrieve a cumulative count of that package's cran downloads up until that date by utilizing the cranDownloads function of packageRank.

```{r}
get_total_downloads <- function(pkg, date) {
  cd <- cranDownloads(packages = pkg, to = 2025) #to = 2025 pulls entire donwload history
  cd$cranlogs.data$cumulative [ 
    cd$cranlogs.data$date == date #retrieving the 'cumulative' value of a particular date gets total download count up to that date
  ]
}
```

To find the most current total historical download count, set a target_date of two days before today. Depending on the time of day, cranDownloads is updated to either 1 or 2 days previous to the current day.

```{r}
target_date <- Sys.Date()-2
```

Retrieve cran download count for each package by looping across package_names and store in a new vector called downloads_count. Directly passing in a package_names vector into cranDownloads function does not work properly. 

```{r}
downloads_count <- numeric(length(package_names))

for (i in seq_along(package_names)) {
  dc <- tryCatch( #cranDownloads sometimes will throw an error that terminates the loop if not handled properly
    get_total_downloads(package_names[i], target_date),
    error = function(e) NA #if the package is not found in cran return NA
  )
  downloads_count[i] <- ifelse(length(dc) == 0, NA, dc)
}
```

Scrape github star count from the gallery webpage.

```{r}
github_stars <- df |> 
  html_elements("span.github-btn") |>
  html_elements("a.gh-count") |> 
  html_text() |> as.numeric()
```

Store data in a new dataframe and export as csv.

```{r}
gallery_packages <- data.frame(package = package_names, stars = github_stars, downloads = downloads_count, gallery = TRUE)
write_csv(gallery_packages, "/Users/vivzh/OneDrive/Documents/gg_work/gallery_packages.csv")
```

## CRAN Packages Webpage

Read in the downloaded CRAN packages (alphabetical order) page html file.

```{r}
df <- read_html("/Users/vivzh/OneDrive/Documents/gg_work/CRAN_ Available Packages By Name.html")
```

Scrape packages names from page and stores as names.

```{r}
names <- df |>
  html_elements("span.CRAN") |> 
  html_text()
```

Filter for the names that start with gg by finding the index boundaries and store in gg_package_names.

```{r}
gg_start <- which(substr(names, 1, 2) == "gg")[1] #beginning index for 'gg' names
gg_end <- which(substr(names, 1, 2) == "gh")[1] - 1 #end index for 'gg' names

gg_package_names <- names[gg_start:gg_end]
```

Remove packages that start with gg but are not relevant to ggplot2. Such names were found manually and saved in csv file.

```{r}
remove_packages <- read.csv("non_ggplot_packages.csv")[[1]]

ggplot_package_names <- gg_package_names[!gg_package_names %in% remove_packages]
```

Scrape the package descriptions from page and store as desc. Resulting vector elements alternate between a package name and its description, and is offset by a "" element between every letter change (e.g. between the end of 'a' names and start of 'b' names).

```{r}
#returns a vector that alternates between package names and their descriptions
desc <- df |>
  html_elements("div.container") |> 
  html_elements("table") |> 
  html_elements("tbody") |> 
  html_elements("tr") |> 
  html_elements("td") |> 
  html_text()
```

Filter for only the packages with names that start with gg by identifying index boundaries.

```{r}
first_gg <- which(substr(desc, 1, 2) == "gg")[1] #beginning index for 'gg' names in descriptions
end_gg <- which(substr(desc, 1, 2) == "gh")[1] - 1 #end index for 'gg' names in descriptions

desc_gg <- desc[first_gg:end_gg]

gg_descriptions <- desc_gg[c(FALSE, TRUE)] #Select only descriptions (remove package names) by storing every other element
```

Remove descriptions of packages starting with gg but not relevant to ggplot2. Found manually and saved in csv file.

```{r}
remove_desc <- read.csv("non_ggplot_desc.csv")[[1]]

ggplot_descriptions <- gg_descriptions[!gg_descriptions %in% remove_desc]
```

Found additional ggplot packages that do not start with gg. Saved names and descriptions in csv files that can be read in for the future.

```{r}
non_gg_desc <- desc[c(1:(first_gg-1), (end_gg+1):length(desc))] #non gg package names
gg_indices <- grep('ggplot', non_gg_desc)[-1] #found indices at which the description or name contains 'ggplot', removes first index due to duplicity
gg_indices <- gg_indices[-match(30865, gg_indices)] #removes duplicate index where name and desc both contain 'ggplot'
replace <- c(13588, 20251, 29832) #replaces these indices at which the name contains 'ggplot' with the indices of their desc
for (num in replace) {
  pos <- match(num, gg_indices)
  gg_indices[pos] <- gg_indices[pos] + 1
}

add_ggplot_names <- non_gg_desc[gg_indices-1] #names are at the elements -1 before each desc
add_ggplot_desc <- non_gg_desc[gg_indices]

#save down additional names and desc for future reference
write_csv(data.frame(names = add_ggplot_names, indices = gg_indices-1), "add_ggplot_names.csv")
write_csv(data.frame(desc = add_ggplot_desc, indices = gg_indices), "add_ggplot_desc.csv")
```

Add additional ggplot package names and descriptions found in process above.

```{r}
add_gg_names <- read.csv("add_ggplot_names.csv")[[1]]
add_gg_desc <- read.csv("add_ggplot_desc.csv")[[1]]

all_ggplot_packages <- c(ggplot_package_names, add_gg_names)
all_ggplot_desc <- c(ggplot_descriptions, add_gg_desc)
```

Retrieve total historic cran download count for each package using the same method as described above.

```{r}
downloads_count <- numeric(length(gg_package_names))

for (i in seq_along(gg_package_names)) {
  dc <- tryCatch(
    get_total_downloads(gg_package_names[i], target_date),
    error = function(e) NA
  )
  downloads_count[i] <- ifelse(length(dc) == 0, NA, dc)
}
```

Save data in new dataframe cran_packages and store as csv file.

```{r}
cran_packages <- data.frame(package = gg_package_names, description = gg_descriptions, downloads = downloads_count, CRAN = TRUE)
write_csv(cran_packages, "/Users/vivzh/OneDrive/Documents/gg_work/cran_packages.csv")
```

## Merge tidyverse gallery and cran packages

Read in and merge the data on ggplot packages to store in a new dataframe, packages.

```{r}
gallery_packages <- read_csv("/Users/vivzh/OneDrive/Documents/gg_work/gallery_packages.csv")

cran_packages <- read_csv("/Users/vivzh/OneDrive/Documents/gg_work/cran_packages.csv")

packages <- full_join(gallery_packages, cran_packages, by = c("package", "downloads"))
```

Sort by download count.

```{r}
sorted_packages <- arrange(packages, desc(downloads))
```